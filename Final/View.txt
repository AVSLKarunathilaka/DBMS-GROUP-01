CREATE OR REPLACE VIEW CAView AS
SELECT
    sc.student_id,
    sc.course_code,
    ROUND(
        (
            -- (Top 2 Quizzes / 100) * 10
            (
                (
                    SELECT IFNULL(SUM(q.mark), 0)
                    FROM (
                        SELECT m2.mark
                        FROM Mark m2
                        JOIN AssessmentComponent ac2 ON m2.assessment_id = ac2.assessment_id
                        WHERE m2.student_id = sc.student_id
                          AND ac2.course_code = sc.course_code
                          AND ac2.name LIKE 'quiz%'
                        ORDER BY m2.mark DESC
                        LIMIT 2
                    ) AS q
                ) / 100.0 * 10
            )
            +
            (
                CASE WHEN sc.course_code = 'ICT1233' THEN
                    COALESCE(( 
                        SELECT m3.mark
                        FROM Mark m3
                        JOIN AssessmentComponent ac3 ON m3.assessment_id = ac3.assessment_id
                        WHERE m3.student_id = sc.student_id
                          AND ac3.course_code = sc.course_code
                          AND ac3.name LIKE 'mid%'
                        LIMIT 1
                    ), 0) / 100.0 * 15
                ELSE
                    COALESCE(( 
                        SELECT m3.mark
                        FROM Mark m3
                        JOIN AssessmentComponent ac3 ON m3.assessment_id = ac3.assessment_id
                        WHERE m3.student_id = sc.student_id
                          AND ac3.course_code = sc.course_code
                          AND ac3.name LIKE 'mid%'
                        LIMIT 1
                    ), 0) / 100.0 * 20
                END
            )
            +
            -- (Assignment / 100) * weight
            -- Ignore the 5% assignment contribution for ICT1233 (use 0%), otherwise 5%
            (
                CASE WHEN sc.course_code = 'ICT1233' THEN
                    COALESCE(( 
                        SELECT m4.mark
                        FROM Mark m4
                        JOIN AssessmentComponent ac4 ON m4.assessment_id = ac4.assessment_id
                        WHERE m4.student_id = sc.student_id
                          AND ac4.course_code = sc.course_code
                          AND ac4.name LIKE 'assignment%'
                        LIMIT 1
                    ), 0) / 100.0 * 0
                ELSE
                    COALESCE(( 
                        SELECT m4.mark
                        FROM Mark m4
                        JOIN AssessmentComponent ac4 ON m4.assessment_id = ac4.assessment_id
                        WHERE m4.student_id = sc.student_id
                          AND ac4.course_code = sc.course_code
                          AND ac4.name LIKE 'assignment%'
                        LIMIT 1
                    ), 0) / 100.0 * 5
                END
            )
            +
            -- (Project / 100) * weight
            -- Use 15% for ICT1233, otherwise 20%
            (
                CASE WHEN sc.course_code = 'ICT1233' THEN
                    COALESCE(
                        (
                            SELECT m5.mark
                            FROM Mark m5
                            JOIN AssessmentComponent ac5 ON m5.assessment_id = ac5.assessment_id
                            WHERE m5.student_id = sc.student_id
                              AND ac5.course_code = sc.course_code
                              AND ac5.name LIKE 'project%'
                            LIMIT 1
                        ), 0
                    ) / 100.0 * 10
                ELSE
                    COALESCE(
                        (
                            SELECT m5.mark
                            FROM Mark m5
                            JOIN AssessmentComponent ac5 ON m5.assessment_id = ac5.assessment_id
                            WHERE m5.student_id = sc.student_id
                              AND ac5.course_code = sc.course_code
                              AND ac5.name LIKE 'project%'
                            LIMIT 1
                        ), 0
                    ) / 100.0 * 20
                END
            )
        ), 2
    ) AS ca_total
FROM (
    -- distinct student + subject combinations
    SELECT DISTINCT m.student_id, ac.course_code
    FROM Mark m
    JOIN AssessmentComponent ac ON m.assessment_id = ac.assessment_id
) AS sc;



CREATE OR REPLACE VIEW AttendanceSummaryByCourse AS
SELECT
    s.course_code,
    c.name AS course_name,
    COUNT(DISTINCT e.student_id) AS total_students,  -- from Enrollment
    COUNT(DISTINCT s.session_id) AS total_sessions,
    
    -- Calculate average attendance percentage per course
    ROUND(
        (SUM(CASE WHEN a.status = 'present' THEN 1 ELSE 0 END) / NULLIF(COUNT(a.status),0)) * 100,
        2
    ) AS average_attendance_percentage

FROM Session s
LEFT JOIN Attendance a ON s.session_id = a.session_id
LEFT JOIN Course c ON s.course_code = c.course_code
LEFT JOIN Enrollment e ON s.course_code = e.course_code  -- join with Enrollment table
GROUP BY s.course_code, c.name
ORDER BY s.course_code;




CREATE OR REPLACE VIEW EligibleAttendanceView AS
SELECT
    stu.registration_no,
    s.course_code,
    ROUND(
        (COUNT(CASE WHEN a.status = 'present' THEN 1 END) * 100.0) / COUNT(a.session_id),
        2
    ) AS attendance_percentage
FROM
    Attendance a
JOIN
    Session s ON a.session_id = s.session_id
JOIN
    Student stu ON a.student_id = stu.user_id
GROUP BY
    a.student_id, s.course_code
ORDER BY
    a.student_id, s.course_code;


CREATE OR REPLACE VIEW EligibleStudentsView AS
SELECT
    stu.user_id AS student_id,
    stu.registration_no,
    e.course_code,

    -- Attendance percentage (from view)
    COALESCE(ea.attendance_percentage, 0) AS attendance_percentage,

    -- Attendance status description
    CASE 
        WHEN stu.status = 'suspended' THEN 'Ineligible (Suspended)'
        WHEN stu.status = 'repeat' THEN 'Attendance Ignored'
        WHEN ea.attendance_percentage >= 80 THEN 'Meets Criteria'
        ELSE 'Lower Attendance'
    END AS attendance_status_detail,

    -- Continuous Assessment (CA) total
    COALESCE(ca.ca_total, 0) AS ca_total,

    -- Final eligibility status
    CASE
        WHEN stu.status = 'suspended' THEN 'Ineligible'
        WHEN (stu.status = 'repeat' OR ea.attendance_percentage >= 80)
             AND COALESCE(ca.ca_total, 0) >= 20
        THEN 'Eligible'
        ELSE 'Ineligible'
    END AS eligibility_status,

    -- Ineligibility reason
    CASE
        WHEN stu.status = 'suspended' THEN 'Suspended Student'
        WHEN ea.attendance_percentage < 80 AND stu.status <> 'repeat' THEN 'Low Attendance'
        WHEN COALESCE(ca.ca_total, 0) < 20 THEN 'Low CA Marks'
        ELSE 'Meets Criteria'
    END AS ineligibility_reason

FROM Student stu
JOIN Enrollment e 
    ON stu.user_id = e.student_id
LEFT JOIN EligibleAttendanceView ea 
    ON stu.registration_no = ea.registration_no 
   AND e.course_code = ea.course_code
LEFT JOIN CAView ca 
    ON stu.user_id = ca.student_id 
   AND e.course_code = ca.course_code

ORDER BY stu.registration_no, e.course_code;


CREATE OR REPLACE VIEW EndMarkView AS
SELECT
    sc.student_id,
    sc.course_code,
    ROUND(
        (
            CASE
                -- Course has both end_theory and end_practical
                WHEN EXISTS (
                    SELECT 1
                    FROM AssessmentComponent acx
                    WHERE acx.course_code = sc.course_code
                      AND acx.name LIKE 'end_practical%'
                ) AND EXISTS (
                    SELECT 1
                    FROM AssessmentComponent acx
                    WHERE acx.course_code = sc.course_code
                      AND acx.name LIKE 'end_theory%'
                ) THEN
                    -- 40 for theory + 20 for practical
                    (
                        COALESCE((
                            SELECT m2.mark
                            FROM Mark m2
                            JOIN AssessmentComponent ac2 ON m2.assessment_id = ac2.assessment_id
                            WHERE m2.student_id = sc.student_id
                              AND ac2.course_code = sc.course_code
                              AND ac2.name LIKE 'end_theory%'
                            LIMIT 1
                        ), 0) / 100.0 * 40
                    ) +
                    (
                        COALESCE((
                            SELECT m3.mark
                            FROM Mark m3
                            JOIN AssessmentComponent ac3 ON m3.assessment_id = ac3.assessment_id
                            WHERE m3.student_id = sc.student_id
                              AND ac3.course_code = sc.course_code
                              AND ac3.name LIKE 'end_practical%'
                            LIMIT 1
                        ), 0) / 100.0 * 20
                    )

                -- Course has only end_practical
                WHEN EXISTS (
                    SELECT 1
                    FROM AssessmentComponent acx
                    WHERE acx.course_code = sc.course_code
                      AND acx.name LIKE 'end_practical%'
                ) THEN
                    -- 60% for practical only
                    (
                        COALESCE((
                            SELECT m3.mark
                            FROM Mark m3
                            JOIN AssessmentComponent ac3 ON m3.assessment_id = ac3.assessment_id
                            WHERE m3.student_id = sc.student_id
                              AND ac3.course_code = sc.course_code
                              AND ac3.name LIKE 'end_practical%'
                            LIMIT 1
                        ), 0) / 100.0 * 60
                    )

                -- Course has only end_theory
                ELSE
                    (
                        COALESCE((
                            SELECT m4.mark
                            FROM Mark m4
                            JOIN AssessmentComponent ac4 ON m4.assessment_id = ac4.assessment_id
                            WHERE m4.student_id = sc.student_id
                              AND ac4.course_code = sc.course_code
                              AND ac4.name LIKE 'end_theory%'
                            LIMIT 1
                        ), 0) / 100.0 * 60
                    )
            END
        ), 2
    ) AS end_total
FROM (
    -- distinct student + course_code combinations
    SELECT DISTINCT m.student_id, ac.course_code
    FROM Mark m
    JOIN AssessmentComponent ac ON m.assessment_id = ac.assessment_id
) AS sc;

CREATE OR REPLACE VIEW final_mark AS
SELECT
    s.registration_no,
    c.course_code,
    
    CASE
        WHEN s.status = 'suspended' THEN 0
        WHEN es.eligibility_status = 'Eligible' 
             AND COALESCE(e.end_total, 0) = 0 THEN 0   
        WHEN es.eligibility_status != 'Eligible'
             AND (c.ca_total < 20 OR a.attendance_percentage < 80) THEN 0  
        WHEN es.eligibility_status = 'Eligible' 
        THEN ROUND(COALESCE(c.ca_total, 0) + COALESCE(e.end_total, 0), 2)
        ELSE 0
    END AS final_total,

    CASE
        WHEN s.status = 'suspended' THEN 'Suspended'
        WHEN es.eligibility_status <> 'Eligible' THEN
            CASE
                WHEN c.ca_total < 20 THEN 'CA Fail'
                WHEN a.attendance_percentage < 80 THEN 'Attendance Fail'
                ELSE 'Not Eligible'
            END
        WHEN es.eligibility_status = 'Eligible' 
             AND COALESCE(e.end_total, 0) = 0 THEN 'End Fail'
        ELSE 'Eligible'
    END AS reason

FROM CAView c
LEFT JOIN EndMarkView e 
    ON c.student_id = e.student_id
   AND c.course_code = e.course_code
LEFT JOIN EligibleStudentsView es 
    ON c.student_id = es.student_id 
   AND es.course_code = c.course_code
LEFT JOIN EligibleAttendanceView a
    ON a.course_code = c.course_code
   AND a.registration_no = (
        SELECT s2.registration_no FROM Student s2 WHERE s2.user_id = c.student_id
   )
JOIN Student s 
    ON c.student_id = s.user_id
ORDER BY s.registration_no, c.course_code;




CREATE OR REPLACE VIEW CourseRepeatStatus AS
SELECT
    stu.user_id AS student_id,
    stu.registration_no,
    e.course_code,
    COALESCE(ca.ca_total, 0) AS ca_total,
    COALESCE(em.end_total, 0) AS end_mark,
    CASE
        WHEN COALESCE(ca.ca_total, 0) < 20 THEN 'CA Repeat'
        ELSE 'CA Pass'
    END AS ca_status,
    CASE
        WHEN COALESCE(em.end_total, 0) / 100 * 60 < 21 THEN 'End Repeat'
        ELSE 'End Pass'
    END AS end_status,
    CASE
        WHEN COALESCE(ca.ca_total, 0) < 20 OR COALESCE(em.end_total, 0) / 100 * 60 < 21 THEN 'Repeat'
        ELSE 'Pass'
    END AS overall_status
FROM Student stu
JOIN Enrollment e ON stu.user_id = e.student_id
LEFT JOIN CAView ca ON stu.user_id = ca.student_id AND e.course_code = ca.course_code
LEFT JOIN EndMarkView em ON stu.user_id = em.student_id AND e.course_code = em.course_code
ORDER BY stu.registration_no, e.course_code;



CREATE OR REPLACE VIEW FinalMarksMorDetails AS
SELECT 
    s.registration_no,
    CONCAT(u.first_name, ' ', u.last_name) AS student_name,
    b.batch_name,
    fm.course_code,
    c.name AS course_name,
    fm.final_total
FROM final_mark fm
JOIN Student s ON fm.registration_no = s.registration_no
JOIN User u ON s.user_id = u.user_id
JOIN Batch b ON s.batch_id = b.batch_id
JOIN Course c ON fm.course_code = c.course_code
ORDER BY s.registration_no, fm.course_code;


CREATE OR REPLACE VIEW StudentGrades AS
SELECT
    sub.student_registration,
    sub.student_name,
    sub.student_status,
    sub.academic_year,
    sub.batch_name,
    sub.course_code,
    sub.course_name,
    
    -- Set final_total to 0 if student has approved medical
    CASE WHEN sub.has_approved_medical_for_course = 1 THEN 0 ELSE sub.final_total END AS final_total,
    
    sub.has_approved_medical_for_course,
    
    -- Apply final grading logic with status rules
    CASE
        WHEN sub.student_status = 'suspended' THEN 'WH'
        WHEN sub.has_approved_medical_for_course = 1 THEN 'MC'
        WHEN sub.student_status = 'repeat' THEN
            CASE
                WHEN sub.final_total >= 55 THEN 'C'
                WHEN sub.final_total >= 50 THEN 'C'
                WHEN sub.final_total >= 45 THEN 'C-'
                WHEN sub.final_total >= 40 THEN 'D+'
                WHEN sub.final_total >= 35 THEN 'D'
                ELSE 'E'
            END
        ELSE sub.computed_grade
    END AS grade,

    -- GPA point mapping (MC/WH = 0)
    CASE
        WHEN sub.student_status = 'suspended' THEN 0.00
        WHEN sub.has_approved_medical_for_course = 1 THEN 0.00
        WHEN sub.student_status = 'repeat' THEN
            CASE
                WHEN sub.final_total >= 55 THEN 2.00
                WHEN sub.final_total >= 50 THEN 2.00
                WHEN sub.final_total >= 45 THEN 1.70
                WHEN sub.final_total >= 40 THEN 1.30
                WHEN sub.final_total >= 35 THEN 1.00
                ELSE 0.00
            END
        ELSE
            CASE
                WHEN sub.final_total >= 90 THEN 4.00
                WHEN sub.final_total >= 80 THEN 4.00
                WHEN sub.final_total >= 75 THEN 3.70
                WHEN sub.final_total >= 70 THEN 3.30
                WHEN sub.final_total >= 65 THEN 3.00
                WHEN sub.final_total >= 60 THEN 2.70
                WHEN sub.final_total >= 55 THEN 2.30
                WHEN sub.final_total >= 50 THEN 2.00
                WHEN sub.final_total >= 45 THEN 1.70
                WHEN sub.final_total >= 40 THEN 1.30
                WHEN sub.final_total >= 35 THEN 1.00
                ELSE 0.00
            END
    END AS grade_point,

    CURRENT_DATE AS calculated_date

FROM (
    SELECT
        s.registration_no AS student_registration,
        CONCAT(u.first_name, ' ', u.last_name) AS student_name,
        s.status AS student_status,
        b.academic_year,
        b.batch_name,
        r.course_code,
        c.name AS course_name,
        r.final_total,

        -- Check approved medical for this course
        (EXISTS (
            SELECT 1
            FROM Medical m
            JOIN AssessmentComponent ac ON m.assessment_id = ac.assessment_id
            WHERE m.student_id = s.user_id
              AND ac.course_code = r.course_code
              AND m.approved = TRUE
              AND ac.name IN ('mid', 'end_theory', 'end_practical', 'assignment', 'project', 'quiz 01', 'quiz 02', 'quiz 03')
        )) AS has_approved_medical_for_course,

        -- Base grade calculation
        CASE
            WHEN r.final_total >= 90 THEN 'A+'
            WHEN r.final_total >= 80 THEN 'A'
            WHEN r.final_total >= 75 THEN 'A-'
            WHEN r.final_total >= 70 THEN 'B+'
            WHEN r.final_total >= 65 THEN 'B'
            WHEN r.final_total >= 60 THEN 'B-'
            WHEN r.final_total >= 55 THEN 'C+'
            WHEN r.final_total >= 50 THEN 'C'
            WHEN r.final_total >= 45 THEN 'C-'
            WHEN r.final_total >= 40 THEN 'D+'
            WHEN r.final_total >= 35 THEN 'D'
            ELSE 'E'
        END AS computed_grade

    FROM final_mark r
    JOIN Student s ON r.registration_no = s.registration_no
    JOIN User u ON s.user_id = u.user_id
    JOIN Batch b ON s.batch_id = b.batch_id
    JOIN Course c ON r.course_code = c.course_code
) AS sub
ORDER BY sub.student_registration, sub.course_code;



CREATE OR REPLACE VIEW StudentGradesSummary AS
SELECT
    student_registration,
    course_code,
    grade
FROM StudentGrades
ORDER BY
    academic_year,
    batch_name,
    student_registration,
    course_code;


CREATE OR REPLACE VIEW CGPAVIEW AS
SELECT
    s.registration_no AS student_registration,
    b.academic_year,
    ROUND(
        SUM(sg.grade_point * c.credits) / SUM(c.credits),
        2
    ) AS cgpa
FROM StudentGrades sg
JOIN Student s ON sg.student_registration = s.registration_no
JOIN Batch b ON s.batch_id = b.batch_id
JOIN Course c ON sg.course_code = c.course_code
WHERE sg.grade NOT IN ('WH', 'MC', 'Ineligible')
  AND c.course_code != 'ENG1212'  
  AND sg.student_status != 'repeat'  
GROUP BY s.registration_no, b.academic_year
ORDER BY s.registration_no, b.academic_year;


CREATE OR REPLACE VIEW SGPAView AS
SELECT
    s.registration_no AS student_registration,
    b.academic_year,
    c.semester AS semester_name,
    CASE
        WHEN EXISTS (
            SELECT 1
            FROM StudentGrades sg2
            JOIN Course c2 ON sg2.course_code = c2.course_code
            WHERE sg2.student_registration = s.registration_no
              AND c2.semester = c.semester
              AND b.academic_year = sg2.academic_year
              AND sg2.grade = 'WH'
        ) THEN 'WH'
        WHEN EXISTS (
            SELECT 1
            FROM StudentGrades sg2
            JOIN Course c2 ON sg2.course_code = c2.course_code
            WHERE sg2.student_registration = s.registration_no
              AND c2.semester = c.semester
              AND b.academic_year = sg2.academic_year
              AND sg2.grade = 'MC'
        ) THEN 'MC'
        ELSE CAST(ROUND(
            SUM(CASE WHEN sg.grade NOT IN ('WH', 'MC', 'Ineligible') THEN sg.grade_point * c.credits ELSE 0 END) 
            / 
            SUM(CASE WHEN sg.grade NOT IN ('WH', 'MC', 'Ineligible') THEN c.credits ELSE 0 END),
            2
        ) AS CHAR)
    END AS sgpa
FROM StudentGrades sg
JOIN Student s 
    ON sg.student_registration = s.registration_no
    AND s.status = 'proper'       
JOIN Batch b 
    ON s.batch_id = b.batch_id
JOIN Course c 
    ON sg.course_code = c.course_code
GROUP BY s.registration_no, b.academic_year, c.semester
ORDER BY s.registration_no, b.academic_year, c.semester;


CREATE OR REPLACE VIEW ExamEligibility AS
SELECT
    s.registration_no,
    CONCAT(u.first_name,' ',u.last_name) AS student_name,
    fm.course_code,
    c.name AS course_name,
    
    ROUND(ca.ca_total, 2) AS ca_marks,

    CASE
        WHEN s.status = 'repeat' AND ca.ca_total >= 20 THEN 'Eligible'
        WHEN s.status = 'suspended' THEN 'InEligible'
        WHEN s.status != 'repeat' AND a.attendance_percentage >= 80 AND ca.ca_total >= 20 THEN 'Eligible'
        ELSE 'Not Eligible'
    END AS eligibility_status

FROM Student s
JOIN User u ON s.user_id = u.user_id
JOIN final_mark fm ON fm.registration_no = s.registration_no
JOIN Course c ON fm.course_code = c.course_code

-- Only include students who have attendance recorded
JOIN eligibleattendanceview a
    ON a.course_code = fm.course_code
   AND a.registration_no = s.registration_no

JOIN CAView ca
    ON ca.course_code = fm.course_code
   AND ca.student_id = s.user_id

ORDER BY s.registration_no, fm.course_code;



CREATE OR REPLACE VIEW ShowFinalResultsView AS
SELECT
    s.registration_no,
    c.course_code,
    c.name AS course_name,

    -- Marks
    ROUND(COALESCE(ca.ca_total, 0), 2) AS CA_Mark,
    ROUND(COALESCE(em.end_total, 0), 2) AS End_Mark,
    ROUND(COALESCE(att.attendance_percentage, 0), 2) AS Attendance_Percentage,

    -- Final mark from studentgrades
    COALESCE(sg.final_total, ROUND(COALESCE(ca.ca_total, 0)*0.4 + COALESCE(em.end_total,0)*0.6, 2)) AS Final_Mark,

    -- Eligibility Status
    CASE
        WHEN s.status = 'suspended' THEN 'Suspended'
        WHEN att.attendance_percentage < 80 THEN 'Attendance Fail'
        WHEN ca.ca_total < 20 THEN 'CA Fail'
        WHEN COALESCE(em.end_total, 0) < 20 THEN 'End Fail'
        ELSE 'Eligible'
    END AS Eligibility_Status,

    -- Grade and Grade Point from studentgrades
    sg.grade AS Final_Grade,
    sg.grade_point AS Grade_Point

FROM Student s
INNER JOIN CAView ca 
    ON s.user_id = ca.student_id           -- Only students with CA marks (enrolled)
LEFT JOIN EndMarkView em 
    ON s.user_id = em.student_id AND ca.course_code = em.course_code
LEFT JOIN EligibleAttendanceView att 
    ON s.registration_no = att.registration_no AND ca.course_code = att.course_code
LEFT JOIN studentgrades sg
    ON s.registration_no = sg.student_registration
   AND ca.course_code = sg.course_code
LEFT JOIN Course c
    ON ca.course_code = c.course_code

ORDER BY s.registration_no, c.course_code;
